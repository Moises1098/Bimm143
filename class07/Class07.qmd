---
title: "Class 7:Clustering and PCA"
author: "Moises (A17579866)"
format: pdf
---

# Clustering

First let's make up some data to cluster so we can get a feel for these methods and how to work with them.

We can use the `nnorm()` function to get random numbers from a normal distribution around a given `mean`.

```{r}
hist(rnorm(5000, mean=3))
```

Let's get 30 points with a mean of 3.

```{r}
tmp <- c(rnorm(30, mean = 3), rnorm(30, mean = -3))
tmp
```

Put two of these together:

```{r}
x <- cbind(x=tmp, y=rev(tmp))
plot(x)
```

## K-means clusterning.

Very popular clustering method that we can use with the `kmeans()` function in base R.

```{r}
km <- kmeans(x, centers =2)
km
```

> Q. What 'component' of your result object details

-   cluster size?

```{r}
km$size
```

-   cluster assignment/membership?

```{r}
km$cluster
```

-   cluster center?

```{r}
km$centers
```

Plot x colored by the kmeans cluster assignment and add cluster centers as blue points

```{r}
plot(x, col=km$cluster)
```

> Let's cluster into 3 groups or some `x` data and make a plot.

```{r}
km <- kmeans(x, centers =4)
x <- cbind(x=tmp, y=rev(tmp))
plot(x, col=km$cluster)
```

# Hierarchical Clustering

We can use the `hclust()` function for Hierarchical Clustering. 
Unlike `kmeans()`, where we could just pass in our data as input, we need to give `hclust()` a "distance matrix".

We will use the `dist()` function to start with.

```{r}
d <- dist(x)
hc <- hclust(d)
hc
```

```{r}
plot(hc)
```

I can now "cut" my tree with the `cutree()` to yield a cluster membership vector.
```{r}
grps<-cutree(hc, h=8)
grps
plot(x, col=grps)
```

You can also tell `cutree()` to cut where it yields "k" groups.
```{r}
cutree(hc, k=2)
```

# 1. PCA of UK food data
## Data import
First we will read the provided `UK_foods.csv` input file (note we can read this directly from the following tinyurl short link: “https://tinyurl.com/UK-foods”.


```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url, row.names=1)
```

> Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?

```{r}
## Complete the following code to find out how many rows and columns are in x?
nrow(x)
ncol(x)
# You can use the **dim()** function, which returns the number of rows and columns or the **nrow()** and **ncol()** functions to return each separately, `i.e. dim(x); ncol(x); nrow(x)`
dim(x)
```
## Checking your data
It is always a good idea to examine your imported data to make sure it meets your expectations. At this stage we want to make sure that no odd things have happened during the importing phase that will come back to haunt us later.

For this task we can use the `View()` function to display all the data (in a new tab in RStudio) or the `head()` and `tail()` functions to print only a portion of the data (by default 6 rows from either the top or bottom of the dataset respectively).

```{r}
head(x)
```
> Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
```

> Q3: Changing what optional argument in the above barplot() function results in the following plot?

```{r}
barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))
```

> Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

```{r}
pairs(x, col=rainbow(10), pch=16)
```
> Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

The higher dots on the diagonal line is representing the y-axis and the dots ranging left and right is representing the x-axis.


The main PCA function in base R is called `prcomp()` it expects the transpose of our data.

```{r}
# Use the prcomp() PCA function 
pca <- prcomp( t(x) )
summary(pca)
```
```{r}
attributes(pca)
```
```{r}
pca$x
```
> Q7. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.
> Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

```{r}
plot(pca$x[,1], pca$x[,2],xlab="PC1", ylab="PC2", xlim=c(-270,500), col="transparent",
     pch=16)
text(pca$x[,1], pca$x[,2], colnames(x), col=c("orange", "red", "blue", "darkgreen"))
```








